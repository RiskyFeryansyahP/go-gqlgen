// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"github.com/confus1on/meetmeup/ent/meetups"
	"github.com/confus1on/meetmeup/ent/users"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// MeetupsCreate is the builder for creating a Meetups entity.
type MeetupsCreate struct {
	config
	name        *string
	description *string
	usersID     *int
	user        map[int]struct{}
}

// SetName sets the name field.
func (mc *MeetupsCreate) SetName(s string) *MeetupsCreate {
	mc.name = &s
	return mc
}

// SetDescription sets the description field.
func (mc *MeetupsCreate) SetDescription(s string) *MeetupsCreate {
	mc.description = &s
	return mc
}

// SetUsersID sets the usersID field.
func (mc *MeetupsCreate) SetUsersID(i int) *MeetupsCreate {
	mc.usersID = &i
	return mc
}

// AddUserIDs adds the user edge to Users by ids.
func (mc *MeetupsCreate) AddUserIDs(ids ...int) *MeetupsCreate {
	if mc.user == nil {
		mc.user = make(map[int]struct{})
	}
	for i := range ids {
		mc.user[ids[i]] = struct{}{}
	}
	return mc
}

// AddUser adds the user edges to Users.
func (mc *MeetupsCreate) AddUser(u ...*Users) *MeetupsCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return mc.AddUserIDs(ids...)
}

// Save creates the Meetups in the database.
func (mc *MeetupsCreate) Save(ctx context.Context) (*Meetups, error) {
	if mc.name == nil {
		return nil, errors.New("ent: missing required field \"name\"")
	}
	if mc.description == nil {
		return nil, errors.New("ent: missing required field \"description\"")
	}
	if mc.usersID == nil {
		return nil, errors.New("ent: missing required field \"usersID\"")
	}
	return mc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MeetupsCreate) SaveX(ctx context.Context) *Meetups {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (mc *MeetupsCreate) sqlSave(ctx context.Context) (*Meetups, error) {
	var (
		m     = &Meetups{config: mc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: meetups.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: meetups.FieldID,
			},
		}
	)
	if value := mc.name; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: meetups.FieldName,
		})
		m.Name = *value
	}
	if value := mc.description; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: meetups.FieldDescription,
		})
		m.Description = *value
	}
	if value := mc.usersID; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: meetups.FieldUsersID,
		})
		m.UsersID = *value
	}
	if nodes := mc.user; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   meetups.UserTable,
			Columns: []string{meetups.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: users.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	m.ID = int(id)
	return m, nil
}
