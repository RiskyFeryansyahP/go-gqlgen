// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/confus1on/meetmeup/ent/migrate"

	"github.com/confus1on/meetmeup/ent/meetups"
	"github.com/confus1on/meetmeup/ent/users"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Meetups is the client for interacting with the Meetups builders.
	Meetups *MeetupsClient
	// Users is the client for interacting with the Users builders.
	Users *UsersClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	c := config{log: log.Println}
	c.options(opts...)
	return &Client{
		config:  c,
		Schema:  migrate.NewSchema(c.driver),
		Meetups: NewMeetupsClient(c),
		Users:   NewUsersClient(c),
	}
}

// Open opens a connection to the database specified by the driver name and a
// driver-specific data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug}
	return &Tx{
		config:  cfg,
		Meetups: NewMeetupsClient(cfg),
		Users:   NewUsersClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Meetups.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true}
	return &Client{
		config:  cfg,
		Schema:  migrate.NewSchema(cfg.driver),
		Meetups: NewMeetupsClient(cfg),
		Users:   NewUsersClient(cfg),
	}
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// MeetupsClient is a client for the Meetups schema.
type MeetupsClient struct {
	config
}

// NewMeetupsClient returns a client for the Meetups from the given config.
func NewMeetupsClient(c config) *MeetupsClient {
	return &MeetupsClient{config: c}
}

// Create returns a create builder for Meetups.
func (c *MeetupsClient) Create() *MeetupsCreate {
	return &MeetupsCreate{config: c.config}
}

// Update returns an update builder for Meetups.
func (c *MeetupsClient) Update() *MeetupsUpdate {
	return &MeetupsUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *MeetupsClient) UpdateOne(m *Meetups) *MeetupsUpdateOne {
	return c.UpdateOneID(m.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *MeetupsClient) UpdateOneID(id int) *MeetupsUpdateOne {
	return &MeetupsUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for Meetups.
func (c *MeetupsClient) Delete() *MeetupsDelete {
	return &MeetupsDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MeetupsClient) DeleteOne(m *Meetups) *MeetupsDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MeetupsClient) DeleteOneID(id int) *MeetupsDeleteOne {
	return &MeetupsDeleteOne{c.Delete().Where(meetups.ID(id))}
}

// Create returns a query builder for Meetups.
func (c *MeetupsClient) Query() *MeetupsQuery {
	return &MeetupsQuery{config: c.config}
}

// Get returns a Meetups entity by its id.
func (c *MeetupsClient) Get(ctx context.Context, id int) (*Meetups, error) {
	return c.Query().Where(meetups.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MeetupsClient) GetX(ctx context.Context, id int) *Meetups {
	m, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return m
}

// QueryUser queries the user edge of a Meetups.
func (c *MeetupsClient) QueryUser(m *Meetups) *UsersQuery {
	query := &UsersQuery{config: c.config}
	id := m.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(meetups.Table, meetups.FieldID, id),
		sqlgraph.To(users.Table, users.FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, meetups.UserTable, meetups.UserColumn),
	)
	query.sql = sqlgraph.Neighbors(m.driver.Dialect(), step)

	return query
}

// UsersClient is a client for the Users schema.
type UsersClient struct {
	config
}

// NewUsersClient returns a client for the Users from the given config.
func NewUsersClient(c config) *UsersClient {
	return &UsersClient{config: c}
}

// Create returns a create builder for Users.
func (c *UsersClient) Create() *UsersCreate {
	return &UsersCreate{config: c.config}
}

// Update returns an update builder for Users.
func (c *UsersClient) Update() *UsersUpdate {
	return &UsersUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *UsersClient) UpdateOne(u *Users) *UsersUpdateOne {
	return c.UpdateOneID(u.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *UsersClient) UpdateOneID(id int) *UsersUpdateOne {
	return &UsersUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for Users.
func (c *UsersClient) Delete() *UsersDelete {
	return &UsersDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UsersClient) DeleteOne(u *Users) *UsersDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UsersClient) DeleteOneID(id int) *UsersDeleteOne {
	return &UsersDeleteOne{c.Delete().Where(users.ID(id))}
}

// Create returns a query builder for Users.
func (c *UsersClient) Query() *UsersQuery {
	return &UsersQuery{config: c.config}
}

// Get returns a Users entity by its id.
func (c *UsersClient) Get(ctx context.Context, id int) (*Users, error) {
	return c.Query().Where(users.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UsersClient) GetX(ctx context.Context, id int) *Users {
	u, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return u
}
